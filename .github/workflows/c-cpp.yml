name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    # Tight but safe defaults for ASan; ignored by non‑ASan jobs
    env:
      ASAN_OPTIONS: |
        quarantine_size_mb=2:
        malloc_context_size=5:
        detect_leaks=0:
        allocator_may_return_null=1:
        abort_on_error=1:
        hard_rss_limit_mb=256
    strategy:
      matrix:
        sanitizer: [ none, asan-ubsan, valgrind ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.6

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake autopoint build-essential clang gcc gettext \
            libtool meson ninja-build pkg-config valgrind xvfb

      - name: Set up environment variables
        shell: bash
        run: |
          if [ "${{ matrix.sanitizer }}" = "asan-ubsan" ]; then
            echo "==> Building with ASan + UBSan"
            export CC=clang
            export CXX=clang++
            export CFLAGS="-O1 -g -fsanitize=address,undefined"
            export CXXFLAGS="$CFLAGS"
            export LDFLAGS="-fsanitize=address,undefined"
          elif [ "${{ matrix.sanitizer }}" = "valgrind" ]; then
            echo "==> Building for Valgrind checks"
            export CC=gcc
            export CXX=g++
            export CFLAGS="-O1 -g"
            export CXXFLAGS="$CFLAGS"
          else
            echo "==> Building with no special sanitizer"
            export CC=gcc
            export CXX=g++
            export CFLAGS="-O2"
            export CXXFLAGS="$CFLAGS"
          fi

          echo "CC=$CC"             >> $GITHUB_ENV
          echo "CXX=$CXX"           >> $GITHUB_ENV
          echo "CFLAGS=$CFLAGS"     >> $GITHUB_ENV
          echo "CXXFLAGS=$CXXFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS"   >> $GITHUB_ENV

      - name: Build and run normal tests
        shell: bash
        run: |
          ./test.sh

      - name: Build fuzz target
        if: matrix.sanitizer == 'asan-ubsan'
        shell: bash
        run: |
          echo "==> Building fuzz target with Clang + ASan/UBSan"
          clang $CFLAGS $LDFLAGS -fsanitize=fuzzer \
            -I. \
            fuzz_symlinks.cpp \
            symlinks.c \
            -o fuzz_symlinks_full

      - name: Run fuzz target (low‑RAM, 5 s)
        if: matrix.sanitizer == 'asan-ubsan'
        shell: bash
        run: |
          echo "==> Running fuzz target (5 s, 128 MB cap)"
          set -e
          mkdir -p seeds       # empty seed corpus → minimal upfront RAM
          ulimit -v 1048576    # 1 GiB virtual‑memory ceiling
          ./fuzz_symlinks_full seeds \
            -max_total_time=5 \
            -rss_limit_mb=128 \
            -max_len=64
